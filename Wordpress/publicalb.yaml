
AWSTemplateFormatVersion: 2010-09-09

Description: Creates Application Load Balancer

Metadata:

  Authors:
    Description: Rahul Sharma
  
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: ALB Parameters
      Parameters:
        - Vpc
        - PublicAlbAcmCertificate
        - PublicAlbSecurityGroup
        - NumberOfSubnets
        - Subnet
        
    ParameterLabels:
      Vpc:
        default: Vpc Id
      PublicAlbAcmCertificate:
        default: ALB Certificate ARN
      PublicAlbSecurityGroup:
        default: Public ALB Security Group
      NumberOfSubnets:
        default: Number of subnets
      Subnet:
        default: Subnets

Parameters:

  NumberOfSubnets:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Default: 3
    Description: Number of subnets. This must match your selections in the list of subnets below.
    Type: String 
  PublicAlbAcmCertificate:
    AllowedPattern: ^$|(arn:aws:acm:)([a-z0-9/:-])*([a-z0-9])$
    Description: '[ Optional ] The AWS Certification Manager certificate ARN for the ALB certificate - this certificate should be created in the region you wish to run the ALB and must reference the WordPress domain name you use below.'
    Type: String
  PublicAlbSecurityGroup:
    Description: Select the ALB security group.
    Type: AWS::EC2::SecurityGroup::Id
  
  Subnet:
    Description: Select existing subnets. The number selected must match the number of subnets above. Subnets selected must be in separate AZs.
    Type: List<AWS::EC2::Subnet::Id>
  Vpc:
    Description: Select an existing Vpc
    Type: AWS::EC2::VPC::Id

Conditions:

  SslCertificate:
    !Not [!Equals [ '', !Ref PublicAlbAcmCertificate ] ]
  NoSslCertificate:
    !Equals [ '', !Ref PublicAlbAcmCertificate ]
  NumberOfSubnets1:
      !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2:
      !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3:
      !Equals [ 3, !Ref NumberOfSubnets ]
  NumberOfSubnets4:
      !Equals [ 4, !Ref NumberOfSubnets ]
  NumberOfSubnets5:
      !Equals [ 5, !Ref NumberOfSubnets ]
  NumberOfSubnets6:
      !Equals [ 6, !Ref NumberOfSubnets ]
  Subnet0: !Or
    - !Condition NumberOfSubnets1
    - !Condition NumberOfSubnets2
    - !Condition NumberOfSubnets3
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet1: !Or
    - !Condition NumberOfSubnets2
    - !Condition NumberOfSubnets3
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet2: !Or
    - !Condition NumberOfSubnets3
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet3: !Or
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet4: !Or
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet5: !Condition NumberOfSubnets6

Mappings:
  Region2ELBAccountId:
    us-east-1:
      AccountId: '127311923021'
    us-west-1:
      AccountId: '027434742980'
    us-west-2:
      AccountId: '797873946194'
    eu-west-1:
      AccountId: '156460612806'
    ap-northeast-1:
      AccountId: '582318560864'
    ap-northeast-2:
      AccountId: '600734575887'
    ap-southeast-1:
      AccountId: '114774131450'
    ap-southeast-2:
      AccountId: '783225319266'
    ap-south-1:
      AccountId: '718504428378'
    us-east-2:
      AccountId: '033677994240'
    sa-east-1:
      AccountId: '507241528517'
    cn-north-1:
      AccountId: '638102146993'
    eu-central-1:
      AccountId: '054676820928'
  Region2ARNPrefix:
    us-east-1:
      ARNPrefix: 'arn:aws:'
    us-west-1:
      ARNPrefix: 'arn:aws:'
    us-west-2:
      ARNPrefix: 'arn:aws:'
    eu-west-1:
      ARNPrefix: 'arn:aws:'
    ap-northeast-1:
      ARNPrefix: 'arn:aws:'
    ap-northeast-2:
      ARNPrefix: 'arn:aws:'
    ap-southeast-1:
      ARNPrefix: 'arn:aws:'
    ap-southeast-2:
      ARNPrefix: 'arn:aws:'
    ap-south-1:
      ARNPrefix: 'arn:aws:'
    us-east-2:
      ARNPrefix: 'arn:aws:'
    sa-east-1:
      ARNPrefix: 'arn:aws:'
    cn-north-1:
      ARNPrefix: 'arn:aws-cn:'
    eu-central-1:
      ARNPrefix: 'arn:aws:'

Resources:
  
  PublicAlbListenerNoSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref PublicAlbTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  PublicAlbListenerSslCertificate:
    Condition: SslCertificate
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref PublicAlbAcmCertificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref PublicAlbTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
  PublicApplicationLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        !If
          [ NumberOfSubnets1,
          [ !Select [ 0, !Ref Subnet ] ],
          !If
            [ NumberOfSubnets2,
            [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ] ],
            !If
              [ NumberOfSubnets3,
              [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ] ],
              !If
                [ NumberOfSubnets4,
                [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ] ],
                !If
                  [ NumberOfSubnets5,
                  [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ], !Select [ 4, !Ref Subnet ] ],
                  [ !Select [ 0, !Ref Subnet ], !Select [ 1, !Ref Subnet ], !Select [ 2, !Ref Subnet ], !Select [ 3, !Ref Subnet ], !Select [ 4, !Ref Subnet ], !Select [ 5, !Ref Subnet ] ]
                  ]
                ]
              ]
            ]
          ]
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60
      SecurityGroups:
      - !Ref PublicAlbSecurityGroup
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'Public ALB / ', !Ref 'AWS::StackName' ] ]
    #   AccessLoggingPolicy:
    #     S3BucketName:
    #       Ref: LogsBucket
    #     S3BucketPrefix: Logs
    #     Enabled: 'true'
    #     EmitInterval: '60'
    # DependsOn: LogsBucketPolicy
  PublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.php
      HealthCheckTimeoutSeconds: 5
      Name: !Join [ '', [ 'PublicALB-', !Ref Vpc ] ]
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'Public ALB / ', !Ref 'AWS::StackName' ] ]
      UnhealthyThresholdCount: 5
      VpcId: !Ref Vpc
  PHPAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      Name: !Join [ '', [ 'PHPALB-', !Ref Vpc ] ]
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'PHP ALB / ', !Ref 'AWS::StackName' ] ]
      UnhealthyThresholdCount: 5
      VpcId: !Ref Vpc    
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
       Actions:
       - Type: forward
         TargetGroupArn:
           Ref: PHPAlbTargetGroup
       Conditions:
       - Field: path-pattern
         Values:
         - "php.farodev.sourcefuse.com"
       ListenerArn:
         Ref: PublicAlbListenerNoSslCertificate
       Priority: 1   
  ListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
       Actions:
       - Type: forward
         TargetGroupArn:
           Ref: PHPAlbTargetGroup
       Conditions:
       - Field: host-header
         Values:
         - "php.farodev.sourcefuse.com"
       ListenerArn:
         Ref: PublicAlbListenerSslCertificate
       Priority: 3       

  LogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  LogsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref 'LogsBucket'
        PolicyDocument:
          Version: '2008-10-17'
          Statement:
          - Sid: ELBAccessLogs20130930
            Effect: Allow
            Resource: !Join ['', [!FindInMap [Region2ARNPrefix, !Ref 'AWS::Region',
                  ARNPrefix], 's3:::', !Ref 'LogsBucket', /, Logs, /AWSLogs/, !Ref 'AWS::AccountId',
                /*]]
            Principal:
              AWS: !FindInMap [Region2ELBAccountId, !Ref 'AWS::Region', AccountId]
            Action: ['s3:PutObject']


Outputs:

  PublicAlbTargetGroupArn:
    Value:
      !Ref PublicAlbTargetGroup
  PHPAlbTargetGroupArn:
    Value:
      !Ref PHPAlbTargetGroup    
  PublicAlbCanonicalHostedZoneId:
    Value:
      !GetAtt PublicApplicationLoadBalancer.CanonicalHostedZoneID
  PublicAlbDnsName:
    Value:
      !GetAtt PublicApplicationLoadBalancer.DNSName
  PublicAlbFullName:
    Value:
      !GetAtt PublicApplicationLoadBalancer.LoadBalancerFullName
  PublicAlbHostname:
    Value:
      !If [ NoSslCertificate, !Join [ '', [ 'http://', !GetAtt PublicApplicationLoadBalancer.DNSName ] ], !Join [ '', [ 'https://', !GetAtt PublicApplicationLoadBalancer.DNSName ] ] ]
  SslCertificate:
    Value:
      !If [ SslCertificate, True, False ]
  ElbAccessLog:
    Value:
      !Ref LogsBucket
    Description: This is the Access log bucket for the Public Elastic load balancer
